<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Document</title>
	<script type="text/javascript" src="vue.js"></script>
	<style>
	.h1class{
		color: red;
	}
	.h2class{
		color:  green;
	}
	</style>
</head>
<body>
		<div id="zmz" >
			<h1 :class="classObj">computed Test : {{HELLO}}</h1>
			<button @click="showmeSomething" :disabled="show">
				showmeSomething {{HELLO}}
			</button>
			<span v-once>{{inputs}}</span>
			<p>{{inputsB}}</p>
			<input type="text" v-model="inputs"/>
			<ul>
				<li v-for="one in lists" :data-value="one.title">
					{{one.name | BIGJJ}}
				</li>
			</ul>
			<span v-if="show" v-html="fakeHtml+'<p>cum intoyour pussy</p>'">
				{{msg}}
			</span>
			<shitbird :name="name, inputs"></shitbird>
		</div>
</body>
<script type="text/javascript">
	var counter = (function(){
		var count = 0;
		return function(value){
			count++;
			return value +" AND COUNTING: "+count;
		}
	})()
	console.log(counter("hehe"))
	var sayShit = Vue.component("shitbird",{
		props:["name","inputs"],
		template: '<div><h2 v-bind:title="name">my name is {{name}} {{inputs}}</h2></div>'
	})
	var app = new Vue({
		el: "#zmz",
		data: {
			classObj: {
				h1class: true
			},
			name: "zhangmingzhi",
			show: false,
			inputs: "zmz",
			inputsB: "",
			fakeHtml: '<p>a ha, im inerting html!</p>',
			msg: "a hidding message",
			lists: [
				{
					name: "hehe",
					title: "hehe"
				},
				{
					name: "xixx",
					title: "xixx"
				},
				{
					name: "asd",
					title: "asd"
				}

			]
		},
		methods: {
			showmeSomething: function(a){
				this.show = true;
				//如果要激活computed的setter的话，直接给computed赋值即可.
				//如果只是调用Computed中getter监控的属性的话，赋值监控的属性即可。
				this.HELLO = 'zmz';
				this.classObj = {
					h1class: false,
					h2class: true
				}
			}
		},
		filters: {
			BIGJJ: function(value){
				return value.split("").map((item, index) => index === 0 ? item.toUpperCase() : item).join("") + " BIG DICK YEAH!!";
			}
		},
		computed: {
			HELLO: {
				get: function(){
					return this.name.charAt(0).toUpperCase()+this.name.slice(1)
				},
				set: function(value){
					this.name = value +"  @FROM SETTER"
				}
			}
		},
		watch: {
			inputs: function(value){
				this.inputsB = counter(value + " @ "+new Date().valueOf());

			}
		}
	})

</script>
</html>